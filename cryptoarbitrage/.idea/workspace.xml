<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="b79300a2-9d92-417a-a998-272697d9b1ee" name="Default" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="core.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="323">
              <caret line="19" column="33" selection-start-line="19" selection-start-column="33" selection-end-line="19" selection-end-column="33" />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="cryptoapis.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/cryptoapis.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="68">
              <caret line="4" column="11" selection-start-line="4" selection-start-column="11" selection-end-line="4" selection-end-column="11" />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="85">
              <caret line="5" column="167" selection-start-line="5" selection-start-column="167" selection-end-line="5" selection-end-column="167" />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="mongodb.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/mongodb.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="51">
              <caret line="3" column="38" selection-start-line="3" selection-start-column="38" selection-end-line="3" selection-end-column="38" />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="syntax.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="859">
              <caret line="77" column="47" selection-start-line="77" selection-start-column="47" selection-end-line="77" selection-end-column="47" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj" />
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/mysql.clj" />
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/mongodb.clj" />
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/cryptoapis.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/core.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="-1369" />
    <option name="y" value="-10" />
    <option name="width" value="1486" />
    <option name="height" value="1047" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="AndroidView" />
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="cursive.last.file.extension.C\:/Users/upins/Documents/IdeaProjects/CryptoArbitrageClojure/cryptoarbitrage/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="preferences.keymap" />
  </component>
  <component name="ReplState" timestamp="1530368395133">{:repl-history {:ide [], :local [{:command &quot;(println (contains? (set '(1 1 3)) 1))&quot;, :offset 38, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (cons 3 (list 1 2)))&quot;, :offset 29, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (list* 1 2 [3 4]))&quot;, :offset 27, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (nth (list 1 2 3) 1))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (first (list 1 2 3)))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn atom-ex\n  \&quot;dodaje watchera koji prati menjanje\n   promenljive atomEx i svaki put kad se \n   to desi ispisuje prethodnu i trenutnu \n   vrednost\&quot;\n  [x]\n\n  (def atomEx (atom x))\n\n  (add-watch atomEx :watcher\n       (fn [key atom old-state new-state]\n         (println \&quot;atomEx change from \&quot; old-state \&quot; to \&quot; new-state)))\n\n  (println \&quot;1st x\&quot; @atomEx)\n  (reset! atomEx 10)\n  (println \&quot;2nd x\&quot; @atomEx)\n  (swap! atomEx inc)\n  (println \&quot;Increment x\&quot; @atomEx)\n  )&quot;, :offset 459, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;s/atom-ex 5&quot;, :offset 11, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/atom-ex 5)&quot;, :offset 12, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn agent-ex\n  []\n  \n  (def tickets-sold (agent0))\n  (send tickets-sold + 15)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n  \n  )\n&quot;, :offset 124, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn agent-ex\n  []\n  \n  (def tickets-sold (agent 0))\n  (send tickets-sold + 15)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n  \n  )&quot;, :offset 124, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn agent-ex\n  []\n\n  (def tickets-sold (agent 0))\n  (send tickets-sold + 15)\n  (println)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n\n  )&quot;, :offset 132, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn agent-ex\n  []\n\n  (def tickets-sold (agent 0))\n  (send tickets-sold + 15)\n  (println)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n  (send tickets-sold + 10)\n  (await-for 100 tickets-sold)\n  (println \&quot;Tickets\&quot; @tickets-sold)\n  \n  (shutdown-agents)\n  )&quot;, :offset 248, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(s/defn-ex)&quot;, :offset 11, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/agent-ex)&quot;, :offset 12, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(def _long 10)&quot;, :offset 14, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(def _double 12.3)&quot;, :offset 18, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(require '[cryptoarbitrage.syntax :as s])&quot;, :offset 41, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/what-grade 5)&quot;, :offset 16, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(require '[cryptoarbitrage.syntas :as c])&quot;, :offset 41, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(require '[cryptoarbitrage.syntax :as c])&quot;, :offset 41, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/one-to-x 5)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/one-to-x 5)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/dbl-to-x 5)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/dbl-to-x )&quot;, :offset 13, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/dbl-to-x 2)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/print-list 2 3 4 5 6)&quot;, :offset 24, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;-main&quot;, :offset 5, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(let [^MongoOptions opts (mg/mongo-options {:threads-allowed-to-block-for-connection-multiplier 300})\n      ^ServerAddress sa  (mg/server-address \&quot;127.0.0.1\&quot; 27017)\n      conn               (mg/connect sa opts)]\n  )&quot;, :offset 215, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(let [conn (mg/connect)]\n  (mg/disconnect conn))&quot;, :offset 48, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;[conn (mg/connect)]&quot;, :offset 19, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(let [admin-db   \&quot;admin\&quot;\n      u    \&quot;vostecar\&quot;\n      p    (.toCharArray \&quot;lakistrajk2\&quot;)\n      cred (mc/create u admin-db p)\n      host \&quot;127.0.0.1\&quot;]\n  (mg/connect-with-credentials host cred))&quot;, :offset 189, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn\n  connect (\n            (let [admin-db   \&quot;admin\&quot;\n                  u    \&quot;vostecar\&quot;\n                  p    (.toCharArray \&quot;lakistrajk2\&quot;)\n                  cred (mcr/create u admin-db p)\n                  host \&quot;127.0.0.1\&quot;])\n            (mg/connect-with-credentials host cred)\n            ))&quot;, :offset 293, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn\n  connect ((let [admin-db   \&quot;admin\&quot;\n                  u    \&quot;vostecar\&quot;\n                  p    (.toCharArray \&quot;lakistrajk2\&quot;)\n                  cred (mcr/create u admin-db p)\n                  host \&quot;127.0.0.1\&quot;]\n              (mg/connect-with-credentials host cred)\n              )\n            ))&quot;, :offset 297, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(:require [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.credentials :as mcr])&quot;, :offset 111, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(ns cryptoarbitrage.mongodb\n  (:require [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.credentials :as mcr])\n  (:import [com.mongodb MongoOptions ServerAddress])\n  )&quot;, :offset 198, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(let [conn (mg/connect)\n      db   (mg/get-db conn \&quot;monger-test\&quot;)\n      coll \&quot;documents\&quot;]\n  (mc/find db coll {:first_name \&quot;Ringo\&quot;}))&quot;, :offset 132, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(let [conn (mg/connect)\n      db (mg/get-db conn \&quot;monger-test\&quot;)]\n  ;; with a generated document id, returns the complete\n  ;; inserted document\n  (mc/insert-and-return db \&quot;documents\&quot; {:name \&quot;John\&quot; :age 30})\n\n  ;; without document id (when you don't need to use it after storing the document)\n  (mc/insert db \&quot;documents\&quot; {:first_name \&quot;John\&quot; :last_name \&quot;Lennon\&quot;}))&quot;, :offset 362, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(let [admin-db   \&quot;admin\&quot;\n      u    \&quot;vostecar\&quot;\n      p    (.toCharArray \&quot;lakistrajk2\&quot;)\n      cred (mcr/create u admin-db p)\n      host \&quot;127.0.0.1\&quot;]\n  (mg/connect-with-credentials host cred))&quot;, :offset 190, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(let [admin-db   \&quot;admin\&quot;\n      u    \&quot;vostecar\&quot;\n      p    (.toCharArray \&quot;lakistrajk2\&quot;)\n      cred (mcr/create u admin-db p)\n      host \&quot;127.0.0.1\&quot;\n      conn  (mg/connect-with-credentials host cred)\n      db (mg/get-db conn \&quot;monger-test\&quot;)]\n  (mc/insert-and-return db \&quot;documents\&quot; {:name \&quot;John\&quot; :age 30})\n\n  ;; without document id (when you don't need to use it after storing the document)\n  (mc/insert db \&quot;documents\&quot; {:first_name \&quot;John\&quot; :last_name \&quot;Lennon\&quot;})\n  )&quot;, :offset 461, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(mg/disconnect conn)&quot;, :offset 20, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(let [admin-db   \&quot;admin\&quot;\n      u    \&quot;vostecar\&quot;\n      p    (.toCharArray \&quot;lakistrajk2\&quot;)\n      cred (mcr/create u admin-db p)\n      host \&quot;127.0.0.1\&quot;\n      conn  (mg/connect-with-credentials host cred)\n      db (mg/get-db conn \&quot;monger-test\&quot;)]\n  (mc/insert-and-return db \&quot;documents\&quot; {:name \&quot;John\&quot; :age 30})\n\n  ;; without document id (when you don't need to use it after storing the document)\n  (mc/insert db \&quot;documents\&quot; {:first_name \&quot;John\&quot; :last_name \&quot;Lennon\&quot;})\n  (mg/disconnect conn)\n  )&quot;, :offset 484, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn insert\n  [col document]\n  (let [admin-db \&quot;admin\&quot;\n        u \&quot;vostecar\&quot;\n        p (.toCharArray \&quot;lakistrajk2\&quot;)\n        cred (mcr/create u admin-db p)\n        host \&quot;127.0.0.1\&quot;\n        conn (mg/connect-with-credentials host cred)\n        db (mg/get-db conn \&quot;monger-test\&quot;)]\n    (mc/insert-and-return db \&quot;documents\&quot; {:name \&quot;John\&quot; :age 30})\n    ;; without document id (when you don't need to use it after storing the document)\n    (mc/insert db col document)\n    (mg/disconnect conn)\n    ))&quot;, :offset 489, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(:require [cryptoarbitrage.mongodb :as mongo])&quot;, :offset 46, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(:require [cryptoarbitrage.mongodb ':as mongo])&quot;, :offset 47, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(mongo/insert \&quot;documents\&quot; {:name \&quot;Vost&quot;, :offset 38, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(:require '[cryptoarbitrage.mongodb :as mongo])&quot;, :offset 47, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;mongo/insert&quot;, :offset 12} {:command &quot;(mongo/insert \&quot;documents\&quot; {:name \&quot;Voste\&quot; :age \&quot;Kralj\&quot;})&quot;, :offset 55, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(:require '[cryptoarbitrage.mongodb :as asdf])&quot;, :offset 46, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(cryptoarbitrage.mongodb/insert \&quot;documents\&quot; {:name \&quot;Voste\&quot; :surname \&quot;Is a king\&quot;})&quot;, :offset 81, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(let  [admin-db \&quot;admin\&quot;\n       u \&quot;vostecar\&quot;\n       p (.toCharArray \&quot;lakistrajk2\&quot;)\n       cred (mcr/create u admin-db p)\n       host \&quot;127.0.0.1\&quot;\n       conn (mg/connect-with-credentials host cred)\n       db (mg/get-db conn \&quot;monger-test\&quot;)\n       coll \&quot;documents\&quot;]\n      \n  (mc/find db coll {:name \&quot;Voste\&quot;}))&quot;, :offset 305, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(println (get (cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;}) 0))&quot;, :offset 64, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn find\n  [query]\n  (let [admin-db \&quot;admin\&quot;\n                 u \&quot;vostecar\&quot;\n                 p (.toCharArray \&quot;lakistrajk2\&quot;)\n                 cred (mcr/create u admin-db p)\n                 host \&quot;127.0.0.1\&quot;\n                 conn (mg/connect-with-credentials host cred)\n                 db (mg/get-db conn \&quot;monger-test\&quot;)\n                 coll \&quot;documents\&quot;]\n    (monger.json (mc/find-one db coll query))))&quot;, :offset 401, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(println ( (cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;})))&quot;, :offset 58, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(println ((cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;})))&quot;, :offset 23, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(println ((cryptoarbitrage.mongodb/find)))&quot;, :offset 39, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;cryptoarbitrage.mongodb/find&quot;, :offset 28, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(ns cryptoarbitrage.mongodb\n  (:require [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.credentials :as mcr]\n            [clojure.data.json :as json]\n            [monger.conversion :as conversion])\n  )&quot;, :offset 233, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn find\n  []\n  (let [admin-db \&quot;admin\&quot;\n                 u \&quot;vostecar\&quot;\n                 p (.toCharArray \&quot;lakistrajk2\&quot;)\n                 cred (mcr/create u admin-db p)\n                 host \&quot;127.0.0.1\&quot;\n                 conn (mg/connect-with-credentials host cred)\n                 db (mg/get-db conn \&quot;monger-test\&quot;)\n                 coll \&quot;documents\&quot;]\n    (conversion (mc/find db coll {:name \&quot;Voste\&quot;}) true)\n    )\n\n  )&quot;, :offset 415, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(ns cryptoarbitrage.mongodb\n  (:require [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.credentials :as mcr]\n            [clojure.data.json :as json]\n            [monger.conversion :as con])\n  )&quot;, :offset 226, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn find\n  []\n  (let [admin-db \&quot;admin\&quot;\n                 u \&quot;vostecar\&quot;\n                 p (.toCharArray \&quot;lakistrajk2\&quot;)\n                 cred (mcr/create u admin-db p)\n                 host \&quot;127.0.0.1\&quot;\n                 conn (mg/connect-with-credentials host cred)\n                 db (mg/get-db conn \&quot;monger-test\&quot;)\n                 coll \&quot;documents\&quot;]\n    (con/from-db-object (mc/find db coll {:name \&quot;Voste\&quot;}) true)\n    )\n\n  )&quot;, :offset 423, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(println cryptoarbitrage.mongodb/find)&quot;, :offset 38, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn find\n  []\n  (let [admin-db \&quot;admin\&quot;\n                 u \&quot;vostecar\&quot;\n                 p (.toCharArray \&quot;lakistrajk2\&quot;)\n                 cred (mcr/create u admin-db p)\n                 host \&quot;127.0.0.1\&quot;\n                 conn (mg/connect-with-credentials host cred)\n                 db (mg/get-db conn \&quot;monger-test\&quot;)\n                 coll \&quot;documents\&quot;]\n    (println(:name (mc/find-maps db coll {:name \&quot;Voste\&quot;})))\n    (mg/disconnect conn)\n    )\n  )&quot;, :offset 443, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(println (cryptoarbitrage.mongodb/find))&quot;, :offset 40, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn maps\n  []\n  (println (hash-map \&quot;Name\&quot;, \&quot;Voste\&quot; \&quot;Age\&quot; 25))\n  (println (sorted-map 3 42 2 \&quot;Koncar\&quot; 1 \&quot;Voste\&quot;))\n  (println (get (hash-map \&quot;Name\&quot; \&quot;Voste\&quot; \&quot;Age\&quot; 25) \&quot;Age\&quot;))\n  (println (contains? (hash-map \&quot;Name\&quot; \&quot;Voste\&quot; \&quot;Age\&quot; 25) \&quot;Age\&quot;))\n  (println (keys (hash-map \&quot;Name\&quot; \&quot;Voste\&quot; \&quot;Age\&quot; 25)))\n  (println (vals (hash-map \&quot;Name\&quot; \&quot;Voste\&quot; \&quot;Age\&quot; 25)))\n  (println (merge-with + (hash-map \&quot;Name\&quot; \&quot;Voste\&quot;) (hash-map \&quot;Age\&quot; 25)))\n  )&quot;, :offset 423, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(def conn\n  (let [admin-db \&quot;admin\&quot;\n        u \&quot;vostecar\&quot;\n        p (.toCharArray \&quot;lakistrajk2\&quot;)\n        cred (mcr/create u admin-db p)\n        host \&quot;127.0.0.1\&quot;]\n    (mg/connect-with-credentials host cred) ))&quot;, :offset 206, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn find\n  [query]\n  (let [admin-db \&quot;admin\&quot;\n        u \&quot;vostecar\&quot;\n        p (.toCharArray \&quot;lakistrajk2\&quot;)\n        cred (mcr/create u admin-db p)\n        host \&quot;127.0.0.1\&quot;\n        conn (mg/connect-with-credentials host cred)\n        db (mg/get-db conn \&quot;monger-test\&quot;)\n        coll \&quot;documents\&quot;\n        result (mc/find-maps db coll query)\n        ]\n    (mg/disconnect conn)\n    (result)\n    )\n  )&quot;, :offset 391, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn find\n  [query]\n  (let [admin-db \&quot;admin\&quot;\n        u \&quot;vostecar\&quot;\n        p (.toCharArray \&quot;lakistrajk2\&quot;)\n        cred (mcr/create u admin-db p)\n        host \&quot;127.0.0.1\&quot;\n        conn (mg/connect-with-credentials host cred)\n        db (mg/get-db conn \&quot;monger-test\&quot;)\n        coll \&quot;documents\&quot;\n        result (mc/find-maps db coll query)\n        ]\n    (mg/disconnect conn)\n    (:name result)\n    )\n  )&quot;, :offset 397, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;( (cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;}))&quot;, :offset 1, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;((cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;}))&quot;, :offset 1, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(println\n  () cryptoarbitrage.mongodb/find) {:name \&quot;Voste\&quot;}&quot;, :offset 3} {:command &quot;(println (cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;}))&quot;, :offset 9, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(insert \&quot;documents\&quot; {:name \&quot;Voste\&quot; :surname \&quot;Testtt\&quot;})&quot;, :offset 52, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(def admin-db \&quot;admin\&quot;)&quot;, :offset 22, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(def u \&quot;vostecar\&quot;)&quot;, :offset 18, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(def p (.toCharArray \&quot;lakistrajk2\&quot;))&quot;, :offset 36, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(def cred (mcr/create u admin-db p))&quot;, :offset 36, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;[monger.credentials :as mcr]&quot;, :offset 28, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(ns cryptoarbitrage.mongodb\n  (:require [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.credentials :as mcr]\n            [clojure.data.json :as json]\n            [clojure.])\n\n  )&quot;, :offset 210, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(ns cryptoarbitrage.mongodb\n  (:require [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.credentials :as mcr]\n            [clojure.data.json :as json]\n           )\n\n  )&quot;, :offset 199, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(cryptoarbitrage.mongodb/in)&quot;, :offset 28} {:command &quot;(insert \&quot;documents\&quot; {:name \&quot;Voste\&quot; :surname \&quot;Testtt\&quot; :objekat {:name \&quot;ovo je pod objekat\&quot;}})&quot;, :offset 92, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(cryptoarbitrage.mongodb/insert \&quot;documents\&quot; {:name \&quot;Voste\&quot; :surname \&quot;Testtt\&quot;})&quot;, :offset 78, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(cryptoarbitrage.mongodb/insert \&quot;documents\&quot; {:name \&quot;Voste\&quot; :surname \&quot;Testtt\&quot; :objekat {:name \&quot;ovo je pod objekat\&quot;}})&quot;, :offset 31, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn find\n  [query]\n  (let [coll \&quot;documents\&quot;]\n    (json/read-str (mc/find-maps db coll query)))\n  )&quot;, :offset 100, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(ns cryptoarbitrage.syntax\n  (:require [clojure.string :as str]))&quot;, :offset 65, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(println (list \&quot;Dog\&quot; 1 3.4 true))&quot;, :offset 33, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (hash-map \&quot;Name\&quot;, \&quot;Voste\&quot; \&quot;Age\&quot; 25))&quot;, :offset 45, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn find\n  [document query]\n  (let [coll document]\n    ((mc/find-one-as-map db coll query))\n    )\n  )&quot;, :offset 103, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn find\n  [query]\n  (let [coll \&quot;documents\&quot;]\n    (mc/find-one-as-map db coll query)\n    )\n  )&quot;, :offset 95, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(defn find\n  [collection query]\n  (let [coll collection]\n    (mc/find-one-as-map db coll query)\n    )\n  )&quot;, :offset 105, :ns &quot;cryptoarbitrage.mongodb&quot;} {:command &quot;(cryptoarbitrage.mongodb/find {:name \&quot;Voste\&quot;})&quot;, :offset 30, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(cryptoarbitrage.mongodb/find \&quot;documents\&quot; {:name \&quot;Voste\&quot;})&quot;, :offset 40, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;c/init-server&quot;, :offset 13, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(require '[cryptoarbitrage.core :as c\n           ])&quot;, :offset 51, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(def server c/init-server)&quot;, :offset 26, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;c/stop-server server&quot;, :offset 20, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/stop-server server)&quot;, :offset 22, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(require '[cryptoarbitrage.core :as c])&quot;, :offset 39} {:command &quot;(def server (c/init-server))&quot;, :offset 28}], :remote [{:command &quot;(require '[cryptoarbitrage.core :as c])&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(c/-main 123)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(def x \&quot;vostecar\&quot;)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(c/-main x)&quot;, :offset 11, :ns &quot;user&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Local">
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
    </configuration>
    <configuration name="Gorilla" type="ClojureREPL" factoryName="Remote">
      <module name="cryptoarbitrage" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="1" />
    </configuration>
    <configuration name="Local" type="ClojureREPL" factoryName="Local">
      <module name="cryptoarbitrage" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <module name="cryptoarbitrage" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method>
        <option name="Synchronize Leiningen" enabled="true" />
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="cryptoarbitrage" />
      <setting name="path" value="$PROJECT_DIR$/src/cryptoarbitrage/core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/cryptoarbitrage" />
    </configuration>
    <configuration name="cryptoarbitrage.syntax" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="cryptoarbitrage" />
      <setting name="path" value="$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/cryptoarbitrage" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <patterns />
    </configuration>
    <configuration name="Gorilla server" type="LeiningenRunConfiguration" factoryName="Leiningen">
      <module name="cryptoarbitrage" />
      <arguments argument="gorilla" />
      <setting name="profiles" value="" />
      <setting name="trampoline" value="false" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <properties />
      <listeners />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.Gorilla" />
      <item itemvalue="Clojure REPL.Local" />
      <item itemvalue="Leiningen.Gorilla server" />
      <item itemvalue="Clojure Application.core" />
      <item itemvalue="Clojure Application.cryptoarbitrage.syntax" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.cryptoarbitrage.syntax" />
        <item itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b79300a2-9d92-417a-a998-272697d9b1ee" name="Default" comment="" />
      <created>1526741588536</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1526741588536</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-1928" y="-8" width="1936" height="1056" extended-state="6" />
    <layout>
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Messages" order="10" />
      <window_info anchor="right" id="Palette&#9;" order="9" />
      <window_info id="Image Layers" order="6" />
      <window_info anchor="right" id="Capture Analysis" order="4" />
      <window_info anchor="bottom" id="Event Log" order="8" side_tool="true" />
      <window_info anchor="right" id="Maven Projects" order="8" />
      <window_info anchor="right" id="REPL" order="6" side_tool="true" weight="0.34488273" />
      <window_info anchor="bottom" id="Version Control" order="9" show_stripe_button="false" />
      <window_info anchor="bottom" id="Run" order="2" weight="0.25054467" />
      <window_info anchor="right" id="Leiningen" order="7" weight="0.32910448" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info id="Capture Tool" order="3" />
      <window_info id="Designer" order="2" />
      <window_info content_ui="combo" id="Project" order="0" visible="true" weight="0.22707888" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info id="UI Designer" order="4" />
      <window_info anchor="right" id="Theme Preview" order="5" />
      <window_info id="Favorites" order="5" side_tool="true" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Find" order="1" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <option name="time" value="1" />
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="8" selection-start-column="8" selection-end-column="8" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1309">
          <caret line="77" column="47" lean-forward="true" selection-start-line="77" selection-start-column="47" selection-end-line="77" selection-end-column="47" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/mongodb.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="527">
          <caret line="31" lean-forward="true" selection-start-line="31" selection-end-line="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="323">
          <caret line="19" column="3" lean-forward="true" selection-start-line="19" selection-start-column="3" selection-end-line="19" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="136">
          <caret line="8" column="26" selection-start-line="8" selection-start-column="26" selection-end-line="8" selection-end-column="26" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/mongodb.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" lean-forward="true" selection-start-line="3" selection-end-line="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="170">
          <caret line="10" column="3" lean-forward="true" selection-start-line="10" selection-start-column="3" selection-end-line="10" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="3630" column="6" selection-start-line="3630" selection-start-column="6" selection-end-line="3630" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gorilla-port">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.lein-repl-history">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/textfile">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="15" lean-forward="true" selection-start-column="15" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/clj-http/clj-http/3.9.0/clj-http-3.9.0.jar!/clj_http/client.clj">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/mysql.clj" />
    <entry file="jar://$MAVEN_REPOSITORY$/com/novemberain/monger/3.1.0/monger-3.1.0.jar!/monger/conversion.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-465">
          <caret line="108" column="5" lean-forward="true" selection-start-line="108" selection-start-column="5" selection-end-line="108" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/novemberain/monger/3.1.0/monger-3.1.0.jar!/monger/json.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="374">
          <caret line="34" column="32" selection-start-line="34" selection-start-column="32" selection-end-line="34" selection-end-column="40" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json_compat_0_1.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="643">
          <caret line="60" column="13" lean-forward="true" selection-start-line="60" selection-start-column="13" selection-end-line="60" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/novemberain/monger/3.1.0/monger-3.1.0.jar!/monger/collection.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="821">
          <caret line="153" column="10" lean-forward="true" selection-start-line="153" selection-start-column="10" selection-end-line="153" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/compojure/compojure/1.6.1/compojure-1.6.1.jar!/compojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-3332">
          <caret column="4" selection-start-column="4" selection-end-column="4" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="859">
          <caret line="77" column="47" selection-start-line="77" selection-start-column="47" selection-end-line="77" selection-end-column="47" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="323">
          <caret line="19" column="33" selection-start-line="19" selection-start-column="33" selection-end-line="19" selection-end-column="33" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/cryptoapis.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="68">
          <caret line="4" column="11" selection-start-line="4" selection-start-column="11" selection-end-line="4" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="85">
          <caret line="5" column="167" selection-start-line="5" selection-start-column="167" selection-end-line="5" selection-end-column="167" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/mongodb.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="51">
          <caret line="3" column="38" selection-start-line="3" selection-start-column="38" selection-end-line="3" selection-end-column="38" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>IDE SDK</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>