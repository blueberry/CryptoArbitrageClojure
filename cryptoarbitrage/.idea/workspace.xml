<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="b79300a2-9d92-417a-a998-272697d9b1ee" name="Default" comment="" />
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="syntax.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="561">
              <caret line="304" lean-forward="true" selection-start-line="304" selection-end-line="304" />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
      </list>
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/core.clj" />
        <option value="$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj" />
      </list>
    </option>
  </component>
  <component name="ProjectFrameBounds" extendedState="6">
    <option name="x" value="243" />
    <option name="y" value="12" />
    <option name="width" value="1338" />
    <option name="height" value="970" />
  </component>
  <component name="ProjectView">
    <navigator proportions="" version="1">
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scope" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cryptoarbitrage" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="cryptoarbitrage" type="b2602c69:ProjectViewProjectNode" />
              <item name="External Libraries" type="cb654da1:ExternalLibrariesNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="AndroidView" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="cursive.last.file.extension.C\:/Users/upins/Documents/IdeaProjects/CryptoArbitrageClojure/cryptoarbitrage/src" value="clj" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
    <property name="settings.editor.selected.configurable" value="editor.preferences.smartKeys" />
  </component>
  <component name="ReplState" timestamp="1526840782637">{:repl-history {:ide [], :local [{:command &quot;(s/one-to-x 10)&quot;, :offset 15, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(def _bool false)&quot;, :offset 17, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(type _bool)&quot;, :offset 12, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(_bool?)&quot;, :offset 8, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;_bool&quot;, :offset 5, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(false? _bool)&quot;, :offset 14, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;10&quot;, :offset 2, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(pos? 10)&quot;, :offset 9, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(even? 9)&quot;, :offset 9, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(odd? 10)&quot;, :offset 9, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(number? \&quot;asdf\&quot;)&quot;, :offset 16, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(float? 1)&quot;, :offset 10, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(float? 1.2)&quot;, :offset 12, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(zero? 0)&quot;, :offset 9, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(zero? (- 1 1))&quot;, :offset 15, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(def _string1 \&quot;Hello\&quot;)&quot;, :offset 22, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(s/stringsFormating)&quot;, :offset 20, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(format \&quot;This is string %s\&quot; _string1)&quot;, :offset 37, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(format \&quot;5 spaces and %5d\&quot; _long1)&quot;, :offset 34, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(format \&quot;Leading zeros %04d\&quot; _long1)&quot;, :offset 36, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(format \&quot;%-4d left justified\&quot; _long1)&quot;, :offset 37, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(format \&quot;%+4d right justified\&quot; _long1)&quot;, :offset 38, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(format \&quot; right justified %+4d\&quot; _long1)&quot;, :offset 39, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(format \&quot;2 decimals %.2f\&quot; _double1)&quot;, :offset 35, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/blank? str1)&quot;, :offset 17, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(def _string2 \&quot;This is secound string\&quot;)&quot;, :offset 39, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/blank? _string2)&quot;, :offset 21, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/includes? \&quot;is\&quot;)&quot;, :offset 20, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/includes? _string2 \&quot;is\&quot;)&quot;, :offset 29, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/includes? _string2 \&quot;bla\&quot;)&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/index-of? _string2 \&quot;is\&quot;)&quot;, :offset 29, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/index-of _string2 \&quot;is\&quot;)&quot;, :offset 28, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/split str1 #\&quot; \&quot;)&quot;, :offset 21, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/split _string2 #\&quot; \&quot;)&quot;, :offset 25, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/split _string2 #\&quot;\\d\&quot;)&quot;, :offset 26, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/join \&quot; \&quot; [\&quot;ovo\&quot; \&quot;je\&quot; \&quot;dodatak\&quot;])&quot;, :offset 37, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/join \&quot; \&quot; [\&quot;skupljamo\&quot; \&quot;array\&quot; \&quot;u string veliki\&quot;])&quot;, :offset 54, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/replace \&quot;Hej zameni 123\&quot; #\&quot;123\&quot; \&quot;456\&quot;)&quot;, :offset 43, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/lower-case _string2)&quot;, :offset 25, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(str/upper-case _string2)&quot;, :offset 25, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (list \&quot;Dog\&quot; 1 3.4 true))&quot;, :offset 33, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (nth 1 (list 1 2 3)))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (rest (list 1 2 3)))&quot;, :offset 29, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (list* 1 2 (3 4)))&quot;, :offset 27, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println 3 (list 1 2))&quot;, :offset 22, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println  (cons 3 (list 1 2)))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (set (1 1 3)))&quot;, :offset 23, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (set '(1 1 3)))&quot;, :offset 24, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (contains? (set '(1 1 3)) 5))&quot;, :offset 38, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;1&quot;, :offset 1, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (disj (set '(1 1 3)) 2))&quot;, :offset 33, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (get (vector 3 2) 1))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (pop (vector 3 2)))&quot;, :offset 28, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (subvec (vector 1 2 3 4) 1 3))&quot;, :offset 39, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (hash-map \&quot;Name\&quot;, \&quot;Derek\&quot; \&quot;Age\&quot; 32))&quot;, :offset 45, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (sotred-map 3 42 2 \&quot;Banas\&quot; 1 \&quot;Voste\&quot;))&quot;, :offset 47, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (sorted-map 3 42 2 \&quot;Banas\&quot; 1 \&quot;Voste\&quot;))&quot;, :offset 47, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (get (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42) \&quot;Name\&quot;))&quot;, :offset 57, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (get (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42) \&quot;Age\&quot;))&quot;, :offset 56, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (contains? (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42) \&quot;Age\&quot;))&quot;, :offset 62, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (keys (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42) \&quot;Age\&quot;))&quot;, :offset 57, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (keys (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42)))&quot;, :offset 51, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (val (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42)))&quot;, :offset 50, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (vals (hash-map \&quot;Name\&quot; \&quot;Derek\&quot; \&quot;Age\&quot; 42)))&quot;, :offset 51, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (merge-with + (\&quot;Name\&quot; \&quot;Derek\&quot;) (\&quot;Age\&quot; 42)))&quot;, :offset 52, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (merge-with + (hash-map \&quot;Name\&quot; \&quot;Derek\&quot;) (hash-map \&quot;Age\&quot; 42)))&quot;, :offset 70, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println \&quot;Increment x\&quot; @atomEx)&quot;, :offset 31, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(atom-ex 5)&quot;, :offset 11, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn atom-ex\n  [x]\n\n  (def atomEx (atom x))\n\n  (add-watch atomEx :watcher\n       (fn [key atom old-state new-state]\n         (println \&quot;atomEx change from \&quot; old-state \&quot; to \&quot; new-state)))\n\n  (println \&quot;1st x\&quot; @atomEx)\n  (reset! atomEx 10)\n  (println \&quot;2nd x\&quot; @atomEx)\n  (swap! atomEx inc)\n  (println \&quot;Increment x\&quot; @atomEx)\n  )&quot;, :offset 323, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;25&quot;, :offset 2, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (merge-with + (hash-map \&quot;Name\&quot; \&quot;Voste\&quot;) (hash-map \&quot;Age\&quot; 25)))&quot;, :offset 70, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn sets\n  (println (contains? (set '(1 1 3)) 1))\n  (println (disj (set '(1 1 3)) 3))\n  )&quot;, :offset 91, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (disj (set '(1 1 3)) 3))&quot;, :offset 33, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (contains? (set '(1 1 3)) 1))&quot;, :offset 38, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (cons 3 (list 1 2)))&quot;, :offset 29, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (list* 1 2 [3 4]))&quot;, :offset 27, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (nth (list 1 2 3) 1))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(println (first (list 1 2 3)))&quot;, :offset 30, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn atom-ex\n  \&quot;dodaje watchera koji prati menjanje\n   promenljive atomEx i svaki put kad se \n   to desi ispisuje prethodnu i trenutnu \n   vrednost\&quot;\n  [x]\n\n  (def atomEx (atom x))\n\n  (add-watch atomEx :watcher\n       (fn [key atom old-state new-state]\n         (println \&quot;atomEx change from \&quot; old-state \&quot; to \&quot; new-state)))\n\n  (println \&quot;1st x\&quot; @atomEx)\n  (reset! atomEx 10)\n  (println \&quot;2nd x\&quot; @atomEx)\n  (swap! atomEx inc)\n  (println \&quot;Increment x\&quot; @atomEx)\n  )&quot;, :offset 459, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;s/atom-ex 5&quot;, :offset 11, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/atom-ex 5)&quot;, :offset 12, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(defn agent-ex\n  []\n  \n  (def tickets-sold (agent0))\n  (send tickets-sold + 15)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n  \n  )\n&quot;, :offset 124, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn agent-ex\n  []\n  \n  (def tickets-sold (agent 0))\n  (send tickets-sold + 15)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n  \n  )&quot;, :offset 124, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn agent-ex\n  []\n\n  (def tickets-sold (agent 0))\n  (send tickets-sold + 15)\n  (println)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n\n  )&quot;, :offset 132, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(defn agent-ex\n  []\n\n  (def tickets-sold (agent 0))\n  (send tickets-sold + 15)\n  (println)\n  (println \&quot;Tickets \&quot; @tickets-sold)\n  (send tickets-sold + 10)\n  (await-for 100 tickets-sold)\n  (println \&quot;Tickets\&quot; @tickets-sold)\n  \n  (shutdown-agents)\n  )&quot;, :offset 248, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(s/defn-ex)&quot;, :offset 11, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/agent-ex)&quot;, :offset 12, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(def _long 10)&quot;, :offset 14, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(def _double 12.3)&quot;, :offset 18, :ns &quot;cryptoarbitrage.syntax&quot;} {:command &quot;(require '[cryptoarbitrage.syntax :as s])&quot;, :offset 41, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/what-grade 5)&quot;, :offset 16, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(require '[cryptoarbitrage.syntas :as c])&quot;, :offset 41, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(require '[cryptoarbitrage.syntax :as c])&quot;, :offset 41, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(s/one-to-x 5)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/one-to-x 5)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/dbl-to-x 5)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/dbl-to-x )&quot;, :offset 13, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/dbl-to-x 2)&quot;, :offset 14, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(c/print-list 2 3 4 5 6)&quot;, :offset 24, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;-main&quot;, :offset 5, :ns &quot;cryptoarbitrage.core&quot;} {:command &quot;(-main)&quot;, :offset 7, :ns &quot;cryptoarbitrage.core&quot;}], :remote [{:command &quot;(require '[cryptoarbitrage.core :as c])&quot;, :offset 39, :ns &quot;user&quot;} {:command &quot;(c/-main 123)&quot;, :offset 13, :ns &quot;user&quot;} {:command &quot;(def x \&quot;vostecar\&quot;)&quot;, :offset 18, :ns &quot;user&quot;} {:command &quot;(c/-main x)&quot;, :offset 11, :ns &quot;user&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.Local">
    <configuration default="true" type="Application" factoryName="Application">
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
    </configuration>
    <configuration name="Gorilla" type="ClojureREPL" factoryName="Remote">
      <module name="cryptoarbitrage" />
      <setting name="host" value="" />
      <setting name="port" value="0" />
      <setting name="replType" value="1" />
    </configuration>
    <configuration name="Local" type="ClojureREPL" factoryName="Local">
      <module name="cryptoarbitrage" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <configuration default="true" type="ClojureREPL" factoryName="Local">
      <module name="cryptoarbitrage" />
      <setting name="replType" value="1" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
      <method>
        <option name="Synchronize Leiningen" enabled="true" />
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="core" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="cryptoarbitrage" />
      <setting name="path" value="$PROJECT_DIR$/src/cryptoarbitrage/core.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/cryptoarbitrage" />
    </configuration>
    <configuration name="cryptoarbitrage.syntax" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="cryptoarbitrage" />
      <setting name="path" value="$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/cryptoarbitrage" />
    </configuration>
    <configuration default="true" type="JUnit" factoryName="JUnit">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="TEST_OBJECT" value="class" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <patterns />
    </configuration>
    <configuration name="Gorilla server" type="LeiningenRunConfiguration" factoryName="Leiningen">
      <module name="cryptoarbitrage" />
      <arguments argument="gorilla" />
      <setting name="profiles" value="" />
      <setting name="trampoline" value="false" />
    </configuration>
    <configuration default="true" type="TestNG" factoryName="TestNG">
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="SUITE_NAME" />
      <option name="PACKAGE_NAME" />
      <option name="MAIN_CLASS_NAME" />
      <option name="METHOD_NAME" />
      <option name="GROUP_NAME" />
      <option name="TEST_OBJECT" value="CLASS" />
      <option name="VM_PARAMETERS" value="-ea" />
      <option name="PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="%MODULE_WORKING_DIR%" />
      <option name="OUTPUT_DIRECTORY" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <option name="TEST_SEARCH_SCOPE">
        <value defaultName="singleModule" />
      </option>
      <option name="USE_DEFAULT_REPORTERS" value="false" />
      <option name="PROPERTIES_FILE" />
      <properties />
      <listeners />
    </configuration>
    <list>
      <item itemvalue="Clojure REPL.Gorilla" />
      <item itemvalue="Clojure REPL.Local" />
      <item itemvalue="Leiningen.Gorilla server" />
      <item itemvalue="Clojure Application.core" />
      <item itemvalue="Clojure Application.cryptoarbitrage.syntax" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Clojure Application.cryptoarbitrage.syntax" />
        <item itemvalue="Clojure Application.core" />
      </list>
    </recent_temporary>
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="b79300a2-9d92-417a-a998-272697d9b1ee" name="Default" comment="" />
      <created>1526741588536</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1526741588536</updated>
    </task>
    <servers />
  </component>
  <component name="ToolWindowManager">
    <frame x="-8" y="-8" width="1936" height="1056" extended-state="6" />
    <editor active="true" />
    <layout>
      <window_info anchor="right" id="Palette" order="3" />
      <window_info anchor="bottom" id="TODO" order="6" />
      <window_info anchor="bottom" id="Messages" order="7" />
      <window_info anchor="right" id="Palette&#9;" order="3" />
      <window_info id="Image Layers" order="2" />
      <window_info anchor="right" id="Capture Analysis" order="3" />
      <window_info anchor="bottom" id="Event Log" order="7" side_tool="true" />
      <window_info anchor="right" id="Maven Projects" order="3" />
      <window_info anchor="right" id="REPL" order="3" side_tool="true" visible="true" weight="0.3128998" />
      <window_info anchor="bottom" id="Version Control" order="7" show_stripe_button="false" />
      <window_info anchor="bottom" id="Run" order="2" visible="true" weight="0.25054467" />
      <window_info anchor="right" id="Leiningen" order="3" weight="0.32910448" />
      <window_info anchor="bottom" id="Terminal" order="7" />
      <window_info id="Capture Tool" order="2" />
      <window_info id="Designer" order="2" />
      <window_info active="true" content_ui="combo" id="Project" order="0" visible="true" weight="0.18123667" />
      <window_info id="Structure" order="1" side_tool="true" weight="0.25" />
      <window_info anchor="right" id="Ant Build" order="1" weight="0.25" />
      <window_info id="UI Designer" order="2" />
      <window_info anchor="right" id="Theme Preview" order="3" />
      <window_info id="Favorites" order="2" side_tool="true" />
      <window_info anchor="bottom" id="Debug" order="3" weight="0.4" />
      <window_info anchor="right" content_ui="combo" id="Hierarchy" order="2" weight="0.25" />
      <window_info anchor="bottom" id="Inspection" order="5" weight="0.4" />
      <window_info anchor="right" id="Commander" internal_type="SLIDING" order="0" type="SLIDING" weight="0.4" />
      <window_info anchor="bottom" id="Message" order="0" />
      <window_info anchor="bottom" id="Cvs" order="4" weight="0.25" />
      <window_info anchor="bottom" id="Find" order="1" />
    </layout>
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <option name="time" value="1" />
    </breakpoint-manager>
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="170">
          <caret line="10" column="3" lean-forward="true" selection-start-line="10" selection-start-column="3" selection-end-line="10" selection-end-column="3" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="170">
          <caret line="10" selection-start-line="10" selection-end-line="10" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/org/clojure/clojure/1.8.0/clojure-1.8.0.jar!/clojure/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="119">
          <caret line="3630" column="6" selection-start-line="3630" selection-start-column="6" selection-end-line="3630" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/.gorilla-port">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/.lein-repl-history">
      <provider selected="true" editor-type-id="text-editor" />
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="153">
          <caret line="9" selection-start-line="9" selection-end-line="9" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/textfile">
      <provider selected="true" editor-type-id="text-editor">
        <state>
          <caret column="15" lean-forward="true" selection-start-column="15" selection-end-column="15" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cryptoarbitrage/syntax.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="561">
          <caret line="304" lean-forward="true" selection-start-line="304" selection-end-line="304" />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>IDE SDK</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>